import boto3
import os
from contextlib import closing
from boto3.dynamodb.conditions import Key, Attr




def lambda_handler(event, context):

    postId = event["Records"][0]["Sns"]["Message"]

    print "Text to Speech function. Unique ID in DynamoDB: " + uniqueId

    # This will retrieve all the information about the users post from the DynamoDB table
    dynamodb = boto3.resource('dynamodb')
    table = dynamodb.Table(os.environ['DB_TABLENAME'])
    postItem = table.query(
        KeyConditionExpression=Key('id').eq(uniqueId)
    )


    text = postItem["Items"][0]["text"]
    voice = postItem["Items"][0]["voice"]

    rest = text

    # Large amount of characters can take a while to process so we divide them by 2500 characters at one time.
    textChunk = []
    while (len(rest) > 2600):
        begin = 0
        end = rest.find(".", 2500)

        if (end == -1):
            end = rest.find(" ", 2500)

        textChunk = rest[begin:end]
        rest = rest[end:]
        textChunks.append(textChunk)
    textChunks.append(rest)

    # This calls the Polly API to convert the text to audio
    polly = boto3.client('polly')
    for textChunk in textChunks:
        response = polly.synthesize_speech(
            OutputFormat='mp3',
            Text = textChunk,
            VoiceId = voice
        )

        # Save the audio stream returned by Amazon Polly on Lambda's temp
        # directory. If there are multiple text chunks, the audio stream
        # will be combined into a single file.
        if "AudioStream" in response:
            with closing(response["AudioStream"]) as stream:
                output = os.path.join("/tmp/", uniqueId)
                with open(output, "a") as file:
                    file.write(stream.read())

    s3 = boto3.client('s3')
    s3.upload_file('/tmp/' + uniqueId,
      os.environ['BUCKET_NAME'],
      postId + ".mp3")
    s3.put_object_acl(ACL='public-read',
      Bucket=os.environ['BUCKET_NAME'],
      Key= uniqueId + ".mp3")

    location = s3.get_bucket_location(Bucket=os.environ['BUCKET_NAME'])
    region = location['LocationConstraint']

    if region is None:
        url_beginning = "https://s3.amazonaws.com/"
    else:
        url_beginning = "https://s3-" + str(region) + ".amazonaws.com/"

    #creates the mp3 url
    url = url_beginning \
            + str(os.environ['BUCKET_NAME']) \
            + "/" \
            + str(uniqueId) \
            + ".mp3"

    # Updating the item in DynamoDB
    response = table.update_item(
        Key={'id':postId},
          UpdateExpression=
            "SET #statusAtt = :statusValue, #urlAtt = :urlValue",
          ExpressionAttributeValues=
            {':statusValue': 'UPDATED', ':urlValue': url},
        ExpressionAttributeNames=
          {'#statusAtt': 'status', '#urlAtt': 'url'},
    )

    return
